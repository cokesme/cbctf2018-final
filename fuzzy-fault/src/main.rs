#![feature(inclusive_range_syntax)]
#![feature(slice_patterns)]

use std::collections::HashSet;
use std::env;

fn xtime(x: u8) -> u8 {
    ((x << 1) ^ (((x >> 7) & 1) * 0x1b))
}

fn InvSubBytes(n: u32) -> u32 {
    let inv_sbox: [u8; 256] = [
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
        0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
        0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
        0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
        0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
        0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
        0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
        0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
        0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
        0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
        0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
        0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
    ];

    let n1 = ((n >> 24) & 0xff) as usize;
    let n2 = ((n >> 16) & 0xff) as usize;
    let n3 = ((n >> 8) & 0xff) as usize;
    let n4 = (n & 0xff) as usize;
    ((inv_sbox[n1] as u32) << 24) + ((inv_sbox[n2] as u32) << 16) + ((inv_sbox[n3] as u32) << 8) + ((inv_sbox[n4] as u32))
}

fn MixColumns(mut state: [u8; 4]) -> u32 {
    let t = state[0];
    let Tmp = state[0] ^ state[1] ^ state[2] ^ state[3];
    let mut Tm  = state[0] ^ state[1];
    Tm = xtime(Tm);
    state[0] ^= Tm ^ Tmp;
    Tm  = state[1] ^ state[2];
    Tm = xtime(Tm);
    state[1] ^= Tm ^ Tmp;
    Tm  = state[2] ^ state[3];
    Tm = xtime(Tm);
    state[2] ^= Tm ^ Tmp;
    Tm  = state[3] ^ t;
    Tm = xtime(Tm);
    state[3] ^= Tm ^ Tmp;
    ((state[0] as u32) << 24) + ((state[1] as u32) << 16) + ((state[2] as u32) << 8) + ((state[3] as u32))
}

fn main() {
    let mut delta = HashSet::new();
    let args: Vec<String> = env::args().collect();

    let words = [
        [0x9e14cfe2, 0xa6ca0617, 0x5238b9e9, 0xbf10fa68],
        [0x3d532896, 0xc63644e6, 0x56c310fa, 0xecd585ce],
        [0x6e4fb5f8, 0xb9270ed3, 0x867822f8, 0xac5ed043],
        [0x8cf13eff, 0xb8ecd56b, 0x5d065a03, 0x24bb5ff6],
        [0xf1a3e892, 0xc8fce6c3, 0xd79ea1f2, 0x1c9c735d],
    ];

    let faulted_words = [
        [0xe92f4126, 0x156f7040, 0xf207720e, 0x1cc2e436],
        [0x445453d4, 0xe9459cfb, 0xc6ec9499, 0xa0f7de0b],
        [0xa1d4c4d3, 0x1264ed4c, 0x6303fec1, 0x6917ee82],
        [0x262d86c1, 0xddf3e99d, 0x3f0bd682, 0xd683731c],
        [0x433d04b3, 0xd74a46f0, 0x293fe918, 0x1676ab64],
    ];

    for j in 0_u8..=255_u8 {
        let n: u8 = j;
        delta.insert(MixColumns([n, 0, 0, 0]));
        delta.insert(MixColumns([0, n, 0, 0]));
        delta.insert(MixColumns([0, 0, n, 0]));
        delta.insert(MixColumns([0, 0, 0, n]));
    }

    let i: usize = match args[1].parse() {
        Ok(n) => n,
        Err(_) => {
            panic!();
        },
    };

    println!("{:?}", i);

    for j in 0..4 {
        let w: u32 = words[i][j];
        let w_tilde: u32 = faulted_words[i][j];

        println!("----------");
        println!("{{\"i\": {:?}, \"j\": {:?}, \"w\": {:?}, \"w_tilde\": {:?}}}", i, j, w, w_tilde);

        let mut L = HashSet::new();

        for k in 0..4294967295 {
            let n: u32 = InvSubBytes(w ^ k) ^ InvSubBytes(w_tilde ^ k);
            if delta.contains(&n) {
                println!("{:?}", k);
                L.insert(k);
            }
        }
    }
}
